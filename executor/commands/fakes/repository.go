// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
)

type Repository struct {
	GetStub        func(path string) (namespace.Namespace, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		path string
	}
	getReturns struct {
		result1 namespace.Namespace
		result2 error
	}
	CreateStub        func(name string) (namespace.Namespace, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		name string
	}
	createReturns struct {
		result1 namespace.Namespace
		result2 error
	}
}

func (fake *Repository) Get(path string) (namespace.Namespace, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		path string
	}{path})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(path)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *Repository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *Repository) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].path
}

func (fake *Repository) GetReturns(result1 namespace.Namespace, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 namespace.Namespace
		result2 error
	}{result1, result2}
}

func (fake *Repository) Create(name string) (namespace.Namespace, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		name string
	}{name})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(name)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *Repository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *Repository) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].name
}

func (fake *Repository) CreateReturns(result1 namespace.Namespace, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 namespace.Namespace
		result2 error
	}{result1, result2}
}
