// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/executor"
	"github.com/vishvananda/netlink"
)

type LinkFactory struct {
	CreateVethPairStub        func(containerID, hostIfaceName string, mtu int) (sandboxLink netlink.Link, containerLink netlink.Link, err error)
	createVethPairMutex       sync.RWMutex
	createVethPairArgsForCall []struct {
		containerID   string
		hostIfaceName string
		mtu           int
	}
	createVethPairReturns struct {
		result1 netlink.Link
		result2 netlink.Link
		result3 error
	}
	FindLinkStub        func(name string) (netlink.Link, error)
	findLinkMutex       sync.RWMutex
	findLinkArgsForCall []struct {
		name string
	}
	findLinkReturns struct {
		result1 netlink.Link
		result2 error
	}
	CreateVxlanStub        func(name string, vni int) (netlink.Link, error)
	createVxlanMutex       sync.RWMutex
	createVxlanArgsForCall []struct {
		name string
		vni  int
	}
	createVxlanReturns struct {
		result1 netlink.Link
		result2 error
	}
	CreateBridgeStub        func(name string, addr *net.IPNet) (*netlink.Bridge, error)
	createBridgeMutex       sync.RWMutex
	createBridgeArgsForCall []struct {
		name string
		addr *net.IPNet
	}
	createBridgeReturns struct {
		result1 *netlink.Bridge
		result2 error
	}
}

func (fake *LinkFactory) CreateVethPair(containerID string, hostIfaceName string, mtu int) (sandboxLink netlink.Link, containerLink netlink.Link, err error) {
	fake.createVethPairMutex.Lock()
	fake.createVethPairArgsForCall = append(fake.createVethPairArgsForCall, struct {
		containerID   string
		hostIfaceName string
		mtu           int
	}{containerID, hostIfaceName, mtu})
	fake.createVethPairMutex.Unlock()
	if fake.CreateVethPairStub != nil {
		return fake.CreateVethPairStub(containerID, hostIfaceName, mtu)
	} else {
		return fake.createVethPairReturns.result1, fake.createVethPairReturns.result2, fake.createVethPairReturns.result3
	}
}

func (fake *LinkFactory) CreateVethPairCallCount() int {
	fake.createVethPairMutex.RLock()
	defer fake.createVethPairMutex.RUnlock()
	return len(fake.createVethPairArgsForCall)
}

func (fake *LinkFactory) CreateVethPairArgsForCall(i int) (string, string, int) {
	fake.createVethPairMutex.RLock()
	defer fake.createVethPairMutex.RUnlock()
	return fake.createVethPairArgsForCall[i].containerID, fake.createVethPairArgsForCall[i].hostIfaceName, fake.createVethPairArgsForCall[i].mtu
}

func (fake *LinkFactory) CreateVethPairReturns(result1 netlink.Link, result2 netlink.Link, result3 error) {
	fake.CreateVethPairStub = nil
	fake.createVethPairReturns = struct {
		result1 netlink.Link
		result2 netlink.Link
		result3 error
	}{result1, result2, result3}
}

func (fake *LinkFactory) FindLink(name string) (netlink.Link, error) {
	fake.findLinkMutex.Lock()
	fake.findLinkArgsForCall = append(fake.findLinkArgsForCall, struct {
		name string
	}{name})
	fake.findLinkMutex.Unlock()
	if fake.FindLinkStub != nil {
		return fake.FindLinkStub(name)
	} else {
		return fake.findLinkReturns.result1, fake.findLinkReturns.result2
	}
}

func (fake *LinkFactory) FindLinkCallCount() int {
	fake.findLinkMutex.RLock()
	defer fake.findLinkMutex.RUnlock()
	return len(fake.findLinkArgsForCall)
}

func (fake *LinkFactory) FindLinkArgsForCall(i int) string {
	fake.findLinkMutex.RLock()
	defer fake.findLinkMutex.RUnlock()
	return fake.findLinkArgsForCall[i].name
}

func (fake *LinkFactory) FindLinkReturns(result1 netlink.Link, result2 error) {
	fake.FindLinkStub = nil
	fake.findLinkReturns = struct {
		result1 netlink.Link
		result2 error
	}{result1, result2}
}

func (fake *LinkFactory) CreateVxlan(name string, vni int) (netlink.Link, error) {
	fake.createVxlanMutex.Lock()
	fake.createVxlanArgsForCall = append(fake.createVxlanArgsForCall, struct {
		name string
		vni  int
	}{name, vni})
	fake.createVxlanMutex.Unlock()
	if fake.CreateVxlanStub != nil {
		return fake.CreateVxlanStub(name, vni)
	} else {
		return fake.createVxlanReturns.result1, fake.createVxlanReturns.result2
	}
}

func (fake *LinkFactory) CreateVxlanCallCount() int {
	fake.createVxlanMutex.RLock()
	defer fake.createVxlanMutex.RUnlock()
	return len(fake.createVxlanArgsForCall)
}

func (fake *LinkFactory) CreateVxlanArgsForCall(i int) (string, int) {
	fake.createVxlanMutex.RLock()
	defer fake.createVxlanMutex.RUnlock()
	return fake.createVxlanArgsForCall[i].name, fake.createVxlanArgsForCall[i].vni
}

func (fake *LinkFactory) CreateVxlanReturns(result1 netlink.Link, result2 error) {
	fake.CreateVxlanStub = nil
	fake.createVxlanReturns = struct {
		result1 netlink.Link
		result2 error
	}{result1, result2}
}

func (fake *LinkFactory) CreateBridge(name string, addr *net.IPNet) (*netlink.Bridge, error) {
	fake.createBridgeMutex.Lock()
	fake.createBridgeArgsForCall = append(fake.createBridgeArgsForCall, struct {
		name string
		addr *net.IPNet
	}{name, addr})
	fake.createBridgeMutex.Unlock()
	if fake.CreateBridgeStub != nil {
		return fake.CreateBridgeStub(name, addr)
	} else {
		return fake.createBridgeReturns.result1, fake.createBridgeReturns.result2
	}
}

func (fake *LinkFactory) CreateBridgeCallCount() int {
	fake.createBridgeMutex.RLock()
	defer fake.createBridgeMutex.RUnlock()
	return len(fake.createBridgeArgsForCall)
}

func (fake *LinkFactory) CreateBridgeArgsForCall(i int) (string, *net.IPNet) {
	fake.createBridgeMutex.RLock()
	defer fake.createBridgeMutex.RUnlock()
	return fake.createBridgeArgsForCall[i].name, fake.createBridgeArgsForCall[i].addr
}

func (fake *LinkFactory) CreateBridgeReturns(result1 *netlink.Bridge, result2 error) {
	fake.CreateBridgeStub = nil
	fake.createBridgeReturns = struct {
		result1 *netlink.Bridge
		result2 error
	}{result1, result2}
}

var _ executor.LinkFactory = new(LinkFactory)
