// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"syscall"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/nl"
)

type NLSocket struct {
	ReceiveStub        func() ([]syscall.NetlinkMessage, error)
	receiveMutex       sync.RWMutex
	receiveArgsForCall []struct{}
	receiveReturns     struct {
		result1 []syscall.NetlinkMessage
		result2 error
	}
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
}

func (fake *NLSocket) Receive() ([]syscall.NetlinkMessage, error) {
	fake.receiveMutex.Lock()
	fake.receiveArgsForCall = append(fake.receiveArgsForCall, struct{}{})
	fake.receiveMutex.Unlock()
	if fake.ReceiveStub != nil {
		return fake.ReceiveStub()
	} else {
		return fake.receiveReturns.result1, fake.receiveReturns.result2
	}
}

func (fake *NLSocket) ReceiveCallCount() int {
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	return len(fake.receiveArgsForCall)
}

func (fake *NLSocket) ReceiveReturns(result1 []syscall.NetlinkMessage, result2 error) {
	fake.ReceiveStub = nil
	fake.receiveReturns = struct {
		result1 []syscall.NetlinkMessage
		result2 error
	}{result1, result2}
}

func (fake *NLSocket) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *NLSocket) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

var _ nl.NLSocket = new(NLSocket)
