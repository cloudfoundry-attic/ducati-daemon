// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/commands"
)

type Condition struct {
	SatisfiedStub        func(interface{}) bool
	satisfiedMutex       sync.RWMutex
	satisfiedArgsForCall []struct {
		arg1 interface{}
	}
	satisfiedReturns struct {
		result1 bool
	}
	StringStub        func() string
	stringMutex       sync.RWMutex
	stringArgsForCall []struct{}
	stringReturns     struct {
		result1 string
	}
}

func (fake *Condition) Satisfied(arg1 interface{}) bool {
	fake.satisfiedMutex.Lock()
	fake.satisfiedArgsForCall = append(fake.satisfiedArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.satisfiedMutex.Unlock()
	if fake.SatisfiedStub != nil {
		return fake.SatisfiedStub(arg1)
	} else {
		return fake.satisfiedReturns.result1
	}
}

func (fake *Condition) SatisfiedCallCount() int {
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	return len(fake.satisfiedArgsForCall)
}

func (fake *Condition) SatisfiedArgsForCall(i int) interface{} {
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	return fake.satisfiedArgsForCall[i].arg1
}

func (fake *Condition) SatisfiedReturns(result1 bool) {
	fake.SatisfiedStub = nil
	fake.satisfiedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Condition) String() string {
	fake.stringMutex.Lock()
	fake.stringArgsForCall = append(fake.stringArgsForCall, struct{}{})
	fake.stringMutex.Unlock()
	if fake.StringStub != nil {
		return fake.StringStub()
	} else {
		return fake.stringReturns.result1
	}
}

func (fake *Condition) StringCallCount() int {
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	return len(fake.stringArgsForCall)
}

func (fake *Condition) StringReturns(result1 string) {
	fake.StringStub = nil
	fake.stringReturns = struct {
		result1 string
	}{result1}
}

var _ commands.Condition = new(Condition)
