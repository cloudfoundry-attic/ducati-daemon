// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/commands"
)

type Context struct {
	AddressAdderStub        func() commands.AddressAdder
	addressAdderMutex       sync.RWMutex
	addressAdderArgsForCall []struct{}
	addressAdderReturns     struct {
		result1 commands.AddressAdder
	}
	BridgeFactoryStub        func() commands.BridgeFactory
	bridgeFactoryMutex       sync.RWMutex
	bridgeFactoryArgsForCall []struct{}
	bridgeFactoryReturns     struct {
		result1 commands.BridgeFactory
	}
	MasterSetterStub        func() commands.MasterSetter
	masterSetterMutex       sync.RWMutex
	masterSetterArgsForCall []struct{}
	masterSetterReturns     struct {
		result1 commands.MasterSetter
	}
	RouteAdderStub        func() commands.RouteAdder
	routeAdderMutex       sync.RWMutex
	routeAdderArgsForCall []struct{}
	routeAdderReturns     struct {
		result1 commands.RouteAdder
	}
	SetUpperStub        func() commands.SetUpper
	setUpperMutex       sync.RWMutex
	setUpperArgsForCall []struct{}
	setUpperReturns     struct {
		result1 commands.SetUpper
	}
	VethFactoryStub        func() commands.VethFactory
	vethFactoryMutex       sync.RWMutex
	vethFactoryArgsForCall []struct{}
	vethFactoryReturns     struct {
		result1 commands.VethFactory
	}
	VxlanFactoryStub        func() commands.VxlanFactory
	vxlanFactoryMutex       sync.RWMutex
	vxlanFactoryArgsForCall []struct{}
	vxlanFactoryReturns     struct {
		result1 commands.VxlanFactory
	}
}

func (fake *Context) AddressAdder() commands.AddressAdder {
	fake.addressAdderMutex.Lock()
	fake.addressAdderArgsForCall = append(fake.addressAdderArgsForCall, struct{}{})
	fake.addressAdderMutex.Unlock()
	if fake.AddressAdderStub != nil {
		return fake.AddressAdderStub()
	} else {
		return fake.addressAdderReturns.result1
	}
}

func (fake *Context) AddressAdderCallCount() int {
	fake.addressAdderMutex.RLock()
	defer fake.addressAdderMutex.RUnlock()
	return len(fake.addressAdderArgsForCall)
}

func (fake *Context) AddressAdderReturns(result1 commands.AddressAdder) {
	fake.AddressAdderStub = nil
	fake.addressAdderReturns = struct {
		result1 commands.AddressAdder
	}{result1}
}

func (fake *Context) BridgeFactory() commands.BridgeFactory {
	fake.bridgeFactoryMutex.Lock()
	fake.bridgeFactoryArgsForCall = append(fake.bridgeFactoryArgsForCall, struct{}{})
	fake.bridgeFactoryMutex.Unlock()
	if fake.BridgeFactoryStub != nil {
		return fake.BridgeFactoryStub()
	} else {
		return fake.bridgeFactoryReturns.result1
	}
}

func (fake *Context) BridgeFactoryCallCount() int {
	fake.bridgeFactoryMutex.RLock()
	defer fake.bridgeFactoryMutex.RUnlock()
	return len(fake.bridgeFactoryArgsForCall)
}

func (fake *Context) BridgeFactoryReturns(result1 commands.BridgeFactory) {
	fake.BridgeFactoryStub = nil
	fake.bridgeFactoryReturns = struct {
		result1 commands.BridgeFactory
	}{result1}
}

func (fake *Context) MasterSetter() commands.MasterSetter {
	fake.masterSetterMutex.Lock()
	fake.masterSetterArgsForCall = append(fake.masterSetterArgsForCall, struct{}{})
	fake.masterSetterMutex.Unlock()
	if fake.MasterSetterStub != nil {
		return fake.MasterSetterStub()
	} else {
		return fake.masterSetterReturns.result1
	}
}

func (fake *Context) MasterSetterCallCount() int {
	fake.masterSetterMutex.RLock()
	defer fake.masterSetterMutex.RUnlock()
	return len(fake.masterSetterArgsForCall)
}

func (fake *Context) MasterSetterReturns(result1 commands.MasterSetter) {
	fake.MasterSetterStub = nil
	fake.masterSetterReturns = struct {
		result1 commands.MasterSetter
	}{result1}
}

func (fake *Context) RouteAdder() commands.RouteAdder {
	fake.routeAdderMutex.Lock()
	fake.routeAdderArgsForCall = append(fake.routeAdderArgsForCall, struct{}{})
	fake.routeAdderMutex.Unlock()
	if fake.RouteAdderStub != nil {
		return fake.RouteAdderStub()
	} else {
		return fake.routeAdderReturns.result1
	}
}

func (fake *Context) RouteAdderCallCount() int {
	fake.routeAdderMutex.RLock()
	defer fake.routeAdderMutex.RUnlock()
	return len(fake.routeAdderArgsForCall)
}

func (fake *Context) RouteAdderReturns(result1 commands.RouteAdder) {
	fake.RouteAdderStub = nil
	fake.routeAdderReturns = struct {
		result1 commands.RouteAdder
	}{result1}
}

func (fake *Context) SetUpper() commands.SetUpper {
	fake.setUpperMutex.Lock()
	fake.setUpperArgsForCall = append(fake.setUpperArgsForCall, struct{}{})
	fake.setUpperMutex.Unlock()
	if fake.SetUpperStub != nil {
		return fake.SetUpperStub()
	} else {
		return fake.setUpperReturns.result1
	}
}

func (fake *Context) SetUpperCallCount() int {
	fake.setUpperMutex.RLock()
	defer fake.setUpperMutex.RUnlock()
	return len(fake.setUpperArgsForCall)
}

func (fake *Context) SetUpperReturns(result1 commands.SetUpper) {
	fake.SetUpperStub = nil
	fake.setUpperReturns = struct {
		result1 commands.SetUpper
	}{result1}
}

func (fake *Context) VethFactory() commands.VethFactory {
	fake.vethFactoryMutex.Lock()
	fake.vethFactoryArgsForCall = append(fake.vethFactoryArgsForCall, struct{}{})
	fake.vethFactoryMutex.Unlock()
	if fake.VethFactoryStub != nil {
		return fake.VethFactoryStub()
	} else {
		return fake.vethFactoryReturns.result1
	}
}

func (fake *Context) VethFactoryCallCount() int {
	fake.vethFactoryMutex.RLock()
	defer fake.vethFactoryMutex.RUnlock()
	return len(fake.vethFactoryArgsForCall)
}

func (fake *Context) VethFactoryReturns(result1 commands.VethFactory) {
	fake.VethFactoryStub = nil
	fake.vethFactoryReturns = struct {
		result1 commands.VethFactory
	}{result1}
}

func (fake *Context) VxlanFactory() commands.VxlanFactory {
	fake.vxlanFactoryMutex.Lock()
	fake.vxlanFactoryArgsForCall = append(fake.vxlanFactoryArgsForCall, struct{}{})
	fake.vxlanFactoryMutex.Unlock()
	if fake.VxlanFactoryStub != nil {
		return fake.VxlanFactoryStub()
	} else {
		return fake.vxlanFactoryReturns.result1
	}
}

func (fake *Context) VxlanFactoryCallCount() int {
	fake.vxlanFactoryMutex.RLock()
	defer fake.vxlanFactoryMutex.RUnlock()
	return len(fake.vxlanFactoryArgsForCall)
}

func (fake *Context) VxlanFactoryReturns(result1 commands.VxlanFactory) {
	fake.VxlanFactoryStub = nil
	fake.vxlanFactoryReturns = struct {
		result1 commands.VxlanFactory
	}{result1}
}

var _ commands.Context = new(Context)
