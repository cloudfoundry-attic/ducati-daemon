// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/appc/cni/pkg/types"
	"github.com/cloudfoundry-incubator/ducati-daemon/commands"
	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
)

type CommandBuilder struct {
	IdempotentlyCreateSandboxStub        func(sandboxName string) commands.Command
	idempotentlyCreateSandboxMutex       sync.RWMutex
	idempotentlyCreateSandboxArgsForCall []struct {
		sandboxName string
	}
	idempotentlyCreateSandboxReturns struct {
		result1 commands.Command
	}
	IdempotentlyCreateVxlanStub        func(vxlanName string, vni int, sandboxName string) commands.Command
	idempotentlyCreateVxlanMutex       sync.RWMutex
	idempotentlyCreateVxlanArgsForCall []struct {
		vxlanName   string
		vni         int
		sandboxName string
	}
	idempotentlyCreateVxlanReturns struct {
		result1 commands.Command
	}
	AddRoutesStub        func(interfaceName string, ipConfig *types.IPConfig) commands.Command
	addRoutesMutex       sync.RWMutex
	addRoutesArgsForCall []struct {
		interfaceName string
		ipConfig      *types.IPConfig
	}
	addRoutesReturns struct {
		result1 commands.Command
	}
	SetupVethStub        func(containerNS namespace.Namespace, sandboxLinkName string, containerLinkName string, address net.IPNet, sandboxName string, routeCommand commands.Command) commands.Command
	setupVethMutex       sync.RWMutex
	setupVethArgsForCall []struct {
		containerNS       namespace.Namespace
		sandboxLinkName   string
		containerLinkName string
		address           net.IPNet
		sandboxName       string
		routeCommand      commands.Command
	}
	setupVethReturns struct {
		result1 commands.Command
	}
	IdempotentlySetupBridgeStub        func(vxlanName, sandboxLinkName, sandboxName string, bridgeName string, ipamResult types.Result) commands.Command
	idempotentlySetupBridgeMutex       sync.RWMutex
	idempotentlySetupBridgeArgsForCall []struct {
		vxlanName       string
		sandboxLinkName string
		sandboxName     string
		bridgeName      string
		ipamResult      types.Result
	}
	idempotentlySetupBridgeReturns struct {
		result1 commands.Command
	}
}

func (fake *CommandBuilder) IdempotentlyCreateSandbox(sandboxName string) commands.Command {
	fake.idempotentlyCreateSandboxMutex.Lock()
	fake.idempotentlyCreateSandboxArgsForCall = append(fake.idempotentlyCreateSandboxArgsForCall, struct {
		sandboxName string
	}{sandboxName})
	fake.idempotentlyCreateSandboxMutex.Unlock()
	if fake.IdempotentlyCreateSandboxStub != nil {
		return fake.IdempotentlyCreateSandboxStub(sandboxName)
	} else {
		return fake.idempotentlyCreateSandboxReturns.result1
	}
}

func (fake *CommandBuilder) IdempotentlyCreateSandboxCallCount() int {
	fake.idempotentlyCreateSandboxMutex.RLock()
	defer fake.idempotentlyCreateSandboxMutex.RUnlock()
	return len(fake.idempotentlyCreateSandboxArgsForCall)
}

func (fake *CommandBuilder) IdempotentlyCreateSandboxArgsForCall(i int) string {
	fake.idempotentlyCreateSandboxMutex.RLock()
	defer fake.idempotentlyCreateSandboxMutex.RUnlock()
	return fake.idempotentlyCreateSandboxArgsForCall[i].sandboxName
}

func (fake *CommandBuilder) IdempotentlyCreateSandboxReturns(result1 commands.Command) {
	fake.IdempotentlyCreateSandboxStub = nil
	fake.idempotentlyCreateSandboxReturns = struct {
		result1 commands.Command
	}{result1}
}

func (fake *CommandBuilder) IdempotentlyCreateVxlan(vxlanName string, vni int, sandboxName string) commands.Command {
	fake.idempotentlyCreateVxlanMutex.Lock()
	fake.idempotentlyCreateVxlanArgsForCall = append(fake.idempotentlyCreateVxlanArgsForCall, struct {
		vxlanName   string
		vni         int
		sandboxName string
	}{vxlanName, vni, sandboxName})
	fake.idempotentlyCreateVxlanMutex.Unlock()
	if fake.IdempotentlyCreateVxlanStub != nil {
		return fake.IdempotentlyCreateVxlanStub(vxlanName, vni, sandboxName)
	} else {
		return fake.idempotentlyCreateVxlanReturns.result1
	}
}

func (fake *CommandBuilder) IdempotentlyCreateVxlanCallCount() int {
	fake.idempotentlyCreateVxlanMutex.RLock()
	defer fake.idempotentlyCreateVxlanMutex.RUnlock()
	return len(fake.idempotentlyCreateVxlanArgsForCall)
}

func (fake *CommandBuilder) IdempotentlyCreateVxlanArgsForCall(i int) (string, int, string) {
	fake.idempotentlyCreateVxlanMutex.RLock()
	defer fake.idempotentlyCreateVxlanMutex.RUnlock()
	return fake.idempotentlyCreateVxlanArgsForCall[i].vxlanName, fake.idempotentlyCreateVxlanArgsForCall[i].vni, fake.idempotentlyCreateVxlanArgsForCall[i].sandboxName
}

func (fake *CommandBuilder) IdempotentlyCreateVxlanReturns(result1 commands.Command) {
	fake.IdempotentlyCreateVxlanStub = nil
	fake.idempotentlyCreateVxlanReturns = struct {
		result1 commands.Command
	}{result1}
}

func (fake *CommandBuilder) AddRoutes(interfaceName string, ipConfig *types.IPConfig) commands.Command {
	fake.addRoutesMutex.Lock()
	fake.addRoutesArgsForCall = append(fake.addRoutesArgsForCall, struct {
		interfaceName string
		ipConfig      *types.IPConfig
	}{interfaceName, ipConfig})
	fake.addRoutesMutex.Unlock()
	if fake.AddRoutesStub != nil {
		return fake.AddRoutesStub(interfaceName, ipConfig)
	} else {
		return fake.addRoutesReturns.result1
	}
}

func (fake *CommandBuilder) AddRoutesCallCount() int {
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	return len(fake.addRoutesArgsForCall)
}

func (fake *CommandBuilder) AddRoutesArgsForCall(i int) (string, *types.IPConfig) {
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	return fake.addRoutesArgsForCall[i].interfaceName, fake.addRoutesArgsForCall[i].ipConfig
}

func (fake *CommandBuilder) AddRoutesReturns(result1 commands.Command) {
	fake.AddRoutesStub = nil
	fake.addRoutesReturns = struct {
		result1 commands.Command
	}{result1}
}

func (fake *CommandBuilder) SetupVeth(containerNS namespace.Namespace, sandboxLinkName string, containerLinkName string, address net.IPNet, sandboxName string, routeCommand commands.Command) commands.Command {
	fake.setupVethMutex.Lock()
	fake.setupVethArgsForCall = append(fake.setupVethArgsForCall, struct {
		containerNS       namespace.Namespace
		sandboxLinkName   string
		containerLinkName string
		address           net.IPNet
		sandboxName       string
		routeCommand      commands.Command
	}{containerNS, sandboxLinkName, containerLinkName, address, sandboxName, routeCommand})
	fake.setupVethMutex.Unlock()
	if fake.SetupVethStub != nil {
		return fake.SetupVethStub(containerNS, sandboxLinkName, containerLinkName, address, sandboxName, routeCommand)
	} else {
		return fake.setupVethReturns.result1
	}
}

func (fake *CommandBuilder) SetupVethCallCount() int {
	fake.setupVethMutex.RLock()
	defer fake.setupVethMutex.RUnlock()
	return len(fake.setupVethArgsForCall)
}

func (fake *CommandBuilder) SetupVethArgsForCall(i int) (namespace.Namespace, string, string, net.IPNet, string, commands.Command) {
	fake.setupVethMutex.RLock()
	defer fake.setupVethMutex.RUnlock()
	return fake.setupVethArgsForCall[i].containerNS, fake.setupVethArgsForCall[i].sandboxLinkName, fake.setupVethArgsForCall[i].containerLinkName, fake.setupVethArgsForCall[i].address, fake.setupVethArgsForCall[i].sandboxName, fake.setupVethArgsForCall[i].routeCommand
}

func (fake *CommandBuilder) SetupVethReturns(result1 commands.Command) {
	fake.SetupVethStub = nil
	fake.setupVethReturns = struct {
		result1 commands.Command
	}{result1}
}

func (fake *CommandBuilder) IdempotentlySetupBridge(vxlanName string, sandboxLinkName string, sandboxName string, bridgeName string, ipamResult types.Result) commands.Command {
	fake.idempotentlySetupBridgeMutex.Lock()
	fake.idempotentlySetupBridgeArgsForCall = append(fake.idempotentlySetupBridgeArgsForCall, struct {
		vxlanName       string
		sandboxLinkName string
		sandboxName     string
		bridgeName      string
		ipamResult      types.Result
	}{vxlanName, sandboxLinkName, sandboxName, bridgeName, ipamResult})
	fake.idempotentlySetupBridgeMutex.Unlock()
	if fake.IdempotentlySetupBridgeStub != nil {
		return fake.IdempotentlySetupBridgeStub(vxlanName, sandboxLinkName, sandboxName, bridgeName, ipamResult)
	} else {
		return fake.idempotentlySetupBridgeReturns.result1
	}
}

func (fake *CommandBuilder) IdempotentlySetupBridgeCallCount() int {
	fake.idempotentlySetupBridgeMutex.RLock()
	defer fake.idempotentlySetupBridgeMutex.RUnlock()
	return len(fake.idempotentlySetupBridgeArgsForCall)
}

func (fake *CommandBuilder) IdempotentlySetupBridgeArgsForCall(i int) (string, string, string, string, types.Result) {
	fake.idempotentlySetupBridgeMutex.RLock()
	defer fake.idempotentlySetupBridgeMutex.RUnlock()
	return fake.idempotentlySetupBridgeArgsForCall[i].vxlanName, fake.idempotentlySetupBridgeArgsForCall[i].sandboxLinkName, fake.idempotentlySetupBridgeArgsForCall[i].sandboxName, fake.idempotentlySetupBridgeArgsForCall[i].bridgeName, fake.idempotentlySetupBridgeArgsForCall[i].ipamResult
}

func (fake *CommandBuilder) IdempotentlySetupBridgeReturns(result1 commands.Command) {
	fake.IdempotentlySetupBridgeStub = nil
	fake.idempotentlySetupBridgeReturns = struct {
		result1 commands.Command
	}{result1}
}
