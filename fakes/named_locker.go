// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/threading"
)

type NamedLocker struct {
	LockStub        func(name string)
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		name string
	}
	UnlockStub        func(name string)
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct {
		name string
	}
}

func (fake *NamedLocker) Lock(name string) {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		name string
	}{name})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		fake.LockStub(name)
	}
}

func (fake *NamedLocker) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *NamedLocker) LockArgsForCall(i int) string {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return fake.lockArgsForCall[i].name
}

func (fake *NamedLocker) Unlock(name string) {
	fake.unlockMutex.Lock()
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct {
		name string
	}{name})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		fake.UnlockStub(name)
	}
}

func (fake *NamedLocker) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *NamedLocker) UnlockArgsForCall(i int) string {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return fake.unlockArgsForCall[i].name
}

var _ threading.NamedLocker = new(NamedLocker)
