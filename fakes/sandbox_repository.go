// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/sandbox"
)

type SandboxRepository struct {
	GetStub        func(sandboxName string) *sandbox.Sandbox
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		sandboxName string
	}
	getReturns struct {
		result1 *sandbox.Sandbox
	}
	PutStub        func(sandboxName string, sbox *sandbox.Sandbox) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		sandboxName string
		sbox        *sandbox.Sandbox
	}
	putReturns struct {
		result1 error
	}
	RemoveStub        func(sandboxName string)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		sandboxName string
	}
}

func (fake *SandboxRepository) Get(sandboxName string) *sandbox.Sandbox {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		sandboxName string
	}{sandboxName})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(sandboxName)
	} else {
		return fake.getReturns.result1
	}
}

func (fake *SandboxRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *SandboxRepository) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].sandboxName
}

func (fake *SandboxRepository) GetReturns(result1 *sandbox.Sandbox) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *sandbox.Sandbox
	}{result1}
}

func (fake *SandboxRepository) Put(sandboxName string, sbox *sandbox.Sandbox) error {
	fake.putMutex.Lock()
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		sandboxName string
		sbox        *sandbox.Sandbox
	}{sandboxName, sbox})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(sandboxName, sbox)
	} else {
		return fake.putReturns.result1
	}
}

func (fake *SandboxRepository) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *SandboxRepository) PutArgsForCall(i int) (string, *sandbox.Sandbox) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].sandboxName, fake.putArgsForCall[i].sbox
}

func (fake *SandboxRepository) PutReturns(result1 error) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *SandboxRepository) Remove(sandboxName string) {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		sandboxName string
	}{sandboxName})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		fake.RemoveStub(sandboxName)
	}
}

func (fake *SandboxRepository) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *SandboxRepository) RemoveArgsForCall(i int) string {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].sandboxName
}

var _ sandbox.Repository = new(SandboxRepository)
