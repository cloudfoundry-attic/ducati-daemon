// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/sandbox"
)

type SandboxRepository struct {
	CreateStub        func(sandboxName string) (sandbox.Sandbox, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		sandboxName string
	}
	createReturns struct {
		result1 sandbox.Sandbox
		result2 error
	}
	GetStub        func(sandboxName string) (sandbox.Sandbox, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		sandboxName string
	}
	getReturns struct {
		result1 sandbox.Sandbox
		result2 error
	}
	RemoveStub        func(sandboxName string)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		sandboxName string
	}
}

func (fake *SandboxRepository) Create(sandboxName string) (sandbox.Sandbox, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		sandboxName string
	}{sandboxName})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(sandboxName)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *SandboxRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *SandboxRepository) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].sandboxName
}

func (fake *SandboxRepository) CreateReturns(result1 sandbox.Sandbox, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 sandbox.Sandbox
		result2 error
	}{result1, result2}
}

func (fake *SandboxRepository) Get(sandboxName string) (sandbox.Sandbox, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		sandboxName string
	}{sandboxName})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(sandboxName)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *SandboxRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *SandboxRepository) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].sandboxName
}

func (fake *SandboxRepository) GetReturns(result1 sandbox.Sandbox, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 sandbox.Sandbox
		result2 error
	}{result1, result2}
}

func (fake *SandboxRepository) Remove(sandboxName string) {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		sandboxName string
	}{sandboxName})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		fake.RemoveStub(sandboxName)
	}
}

func (fake *SandboxRepository) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *SandboxRepository) RemoveArgsForCall(i int) string {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].sandboxName
}

var _ sandbox.Repository = new(SandboxRepository)
