// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
)

type Opener struct {
	OpenPathStub        func(path string) (namespace.Namespace, error)
	openPathMutex       sync.RWMutex
	openPathArgsForCall []struct {
		path string
	}
	openPathReturns struct {
		result1 namespace.Namespace
		result2 error
	}
}

func (fake *Opener) OpenPath(path string) (namespace.Namespace, error) {
	fake.openPathMutex.Lock()
	fake.openPathArgsForCall = append(fake.openPathArgsForCall, struct {
		path string
	}{path})
	fake.openPathMutex.Unlock()
	if fake.OpenPathStub != nil {
		return fake.OpenPathStub(path)
	} else {
		return fake.openPathReturns.result1, fake.openPathReturns.result2
	}
}

func (fake *Opener) OpenPathCallCount() int {
	fake.openPathMutex.RLock()
	defer fake.openPathMutex.RUnlock()
	return len(fake.openPathArgsForCall)
}

func (fake *Opener) OpenPathArgsForCall(i int) string {
	fake.openPathMutex.RLock()
	defer fake.openPathMutex.RUnlock()
	return fake.openPathArgsForCall[i].path
}

func (fake *Opener) OpenPathReturns(result1 namespace.Namespace, result2 error) {
	fake.OpenPathStub = nil
	fake.openPathReturns = struct {
		result1 namespace.Namespace
		result2 error
	}{result1, result2}
}

var _ namespace.Opener = new(Opener)
