// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/executor"
	"github.com/cloudfoundry-incubator/ducati-daemon/executor/commands"
)

type Context struct {
	AddressManagerStub        func() commands.AddressManager
	addressManagerMutex       sync.RWMutex
	addressManagerArgsForCall []struct{}
	addressManagerReturns     struct {
		result1 commands.AddressManager
	}
	LinkFactoryStub        func() commands.LinkFactory
	linkFactoryMutex       sync.RWMutex
	linkFactoryArgsForCall []struct{}
	linkFactoryReturns     struct {
		result1 commands.LinkFactory
	}
	RouteManagerStub        func() commands.RouteManager
	routeManagerMutex       sync.RWMutex
	routeManagerArgsForCall []struct{}
	routeManagerReturns     struct {
		result1 commands.RouteManager
	}
}

func (fake *Context) AddressManager() commands.AddressManager {
	fake.addressManagerMutex.Lock()
	fake.addressManagerArgsForCall = append(fake.addressManagerArgsForCall, struct{}{})
	fake.addressManagerMutex.Unlock()
	if fake.AddressManagerStub != nil {
		return fake.AddressManagerStub()
	} else {
		return fake.addressManagerReturns.result1
	}
}

func (fake *Context) AddressManagerCallCount() int {
	fake.addressManagerMutex.RLock()
	defer fake.addressManagerMutex.RUnlock()
	return len(fake.addressManagerArgsForCall)
}

func (fake *Context) AddressManagerReturns(result1 commands.AddressManager) {
	fake.AddressManagerStub = nil
	fake.addressManagerReturns = struct {
		result1 commands.AddressManager
	}{result1}
}

func (fake *Context) LinkFactory() commands.LinkFactory {
	fake.linkFactoryMutex.Lock()
	fake.linkFactoryArgsForCall = append(fake.linkFactoryArgsForCall, struct{}{})
	fake.linkFactoryMutex.Unlock()
	if fake.LinkFactoryStub != nil {
		return fake.LinkFactoryStub()
	} else {
		return fake.linkFactoryReturns.result1
	}
}

func (fake *Context) LinkFactoryCallCount() int {
	fake.linkFactoryMutex.RLock()
	defer fake.linkFactoryMutex.RUnlock()
	return len(fake.linkFactoryArgsForCall)
}

func (fake *Context) LinkFactoryReturns(result1 commands.LinkFactory) {
	fake.LinkFactoryStub = nil
	fake.linkFactoryReturns = struct {
		result1 commands.LinkFactory
	}{result1}
}

func (fake *Context) RouteManager() commands.RouteManager {
	fake.routeManagerMutex.Lock()
	fake.routeManagerArgsForCall = append(fake.routeManagerArgsForCall, struct{}{})
	fake.routeManagerMutex.Unlock()
	if fake.RouteManagerStub != nil {
		return fake.RouteManagerStub()
	} else {
		return fake.routeManagerReturns.result1
	}
}

func (fake *Context) RouteManagerCallCount() int {
	fake.routeManagerMutex.RLock()
	defer fake.routeManagerMutex.RUnlock()
	return len(fake.routeManagerArgsForCall)
}

func (fake *Context) RouteManagerReturns(result1 commands.RouteManager) {
	fake.RouteManagerStub = nil
	fake.routeManagerReturns = struct {
		result1 commands.RouteManager
	}{result1}
}

var _ executor.Context = new(Context)
