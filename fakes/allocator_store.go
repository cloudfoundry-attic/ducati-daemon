// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/ipam"
)

type AllocatorStore struct {
	ReserveStub        func(id string, ip net.IP) (bool, error)
	reserveMutex       sync.RWMutex
	reserveArgsForCall []struct {
		id string
		ip net.IP
	}
	reserveReturns struct {
		result1 bool
		result2 error
	}
	ReleaseByIDStub        func(id string) error
	releaseByIDMutex       sync.RWMutex
	releaseByIDArgsForCall []struct {
		id string
	}
	releaseByIDReturns struct {
		result1 error
	}
	ContainsStub        func(id string) bool
	containsMutex       sync.RWMutex
	containsArgsForCall []struct {
		id string
	}
	containsReturns struct {
		result1 bool
	}
}

func (fake *AllocatorStore) Reserve(id string, ip net.IP) (bool, error) {
	fake.reserveMutex.Lock()
	fake.reserveArgsForCall = append(fake.reserveArgsForCall, struct {
		id string
		ip net.IP
	}{id, ip})
	fake.reserveMutex.Unlock()
	if fake.ReserveStub != nil {
		return fake.ReserveStub(id, ip)
	} else {
		return fake.reserveReturns.result1, fake.reserveReturns.result2
	}
}

func (fake *AllocatorStore) ReserveCallCount() int {
	fake.reserveMutex.RLock()
	defer fake.reserveMutex.RUnlock()
	return len(fake.reserveArgsForCall)
}

func (fake *AllocatorStore) ReserveArgsForCall(i int) (string, net.IP) {
	fake.reserveMutex.RLock()
	defer fake.reserveMutex.RUnlock()
	return fake.reserveArgsForCall[i].id, fake.reserveArgsForCall[i].ip
}

func (fake *AllocatorStore) ReserveReturns(result1 bool, result2 error) {
	fake.ReserveStub = nil
	fake.reserveReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *AllocatorStore) ReleaseByID(id string) error {
	fake.releaseByIDMutex.Lock()
	fake.releaseByIDArgsForCall = append(fake.releaseByIDArgsForCall, struct {
		id string
	}{id})
	fake.releaseByIDMutex.Unlock()
	if fake.ReleaseByIDStub != nil {
		return fake.ReleaseByIDStub(id)
	} else {
		return fake.releaseByIDReturns.result1
	}
}

func (fake *AllocatorStore) ReleaseByIDCallCount() int {
	fake.releaseByIDMutex.RLock()
	defer fake.releaseByIDMutex.RUnlock()
	return len(fake.releaseByIDArgsForCall)
}

func (fake *AllocatorStore) ReleaseByIDArgsForCall(i int) string {
	fake.releaseByIDMutex.RLock()
	defer fake.releaseByIDMutex.RUnlock()
	return fake.releaseByIDArgsForCall[i].id
}

func (fake *AllocatorStore) ReleaseByIDReturns(result1 error) {
	fake.ReleaseByIDStub = nil
	fake.releaseByIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *AllocatorStore) Contains(id string) bool {
	fake.containsMutex.Lock()
	fake.containsArgsForCall = append(fake.containsArgsForCall, struct {
		id string
	}{id})
	fake.containsMutex.Unlock()
	if fake.ContainsStub != nil {
		return fake.ContainsStub(id)
	} else {
		return fake.containsReturns.result1
	}
}

func (fake *AllocatorStore) ContainsCallCount() int {
	fake.containsMutex.RLock()
	defer fake.containsMutex.RUnlock()
	return len(fake.containsArgsForCall)
}

func (fake *AllocatorStore) ContainsArgsForCall(i int) string {
	fake.containsMutex.RLock()
	defer fake.containsMutex.RUnlock()
	return fake.containsArgsForCall[i].id
}

func (fake *AllocatorStore) ContainsReturns(result1 bool) {
	fake.ContainsStub = nil
	fake.containsReturns = struct {
		result1 bool
	}{result1}
}

var _ ipam.AllocatorStore = new(AllocatorStore)
