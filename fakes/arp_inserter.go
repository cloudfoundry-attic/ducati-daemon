// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
	"github.com/cloudfoundry-incubator/ducati-daemon/watcher"
)

type ARPInserter struct {
	HandleResolvedNeighborsStub        func(ns namespace.Executor, resolvedNeighbors <-chan watcher.Neighbor) error
	handleResolvedNeighborsMutex       sync.RWMutex
	handleResolvedNeighborsArgsForCall []struct {
		ns                namespace.Executor
		resolvedNeighbors <-chan watcher.Neighbor
	}
	handleResolvedNeighborsReturns struct {
		result1 error
	}
}

func (fake *ARPInserter) HandleResolvedNeighbors(ns namespace.Executor, resolvedNeighbors <-chan watcher.Neighbor) error {
	fake.handleResolvedNeighborsMutex.Lock()
	fake.handleResolvedNeighborsArgsForCall = append(fake.handleResolvedNeighborsArgsForCall, struct {
		ns                namespace.Executor
		resolvedNeighbors <-chan watcher.Neighbor
	}{ns, resolvedNeighbors})
	fake.handleResolvedNeighborsMutex.Unlock()
	if fake.HandleResolvedNeighborsStub != nil {
		return fake.HandleResolvedNeighborsStub(ns, resolvedNeighbors)
	} else {
		return fake.handleResolvedNeighborsReturns.result1
	}
}

func (fake *ARPInserter) HandleResolvedNeighborsCallCount() int {
	fake.handleResolvedNeighborsMutex.RLock()
	defer fake.handleResolvedNeighborsMutex.RUnlock()
	return len(fake.handleResolvedNeighborsArgsForCall)
}

func (fake *ARPInserter) HandleResolvedNeighborsArgsForCall(i int) (namespace.Executor, <-chan watcher.Neighbor) {
	fake.handleResolvedNeighborsMutex.RLock()
	defer fake.handleResolvedNeighborsMutex.RUnlock()
	return fake.handleResolvedNeighborsArgsForCall[i].ns, fake.handleResolvedNeighborsArgsForCall[i].resolvedNeighbors
}

func (fake *ARPInserter) HandleResolvedNeighborsReturns(result1 error) {
	fake.HandleResolvedNeighborsStub = nil
	fake.handleResolvedNeighborsReturns = struct {
		result1 error
	}{result1}
}
