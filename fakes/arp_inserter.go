// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
	"github.com/cloudfoundry-incubator/ducati-daemon/watcher"
)

type ARPInserter struct {
	HandleResolvedNeighborsStub        func(ready chan error, ns namespace.Executor, vxlanName string, resolvedNeighbors <-chan watcher.Neighbor)
	handleResolvedNeighborsMutex       sync.RWMutex
	handleResolvedNeighborsArgsForCall []struct {
		ready             chan error
		ns                namespace.Executor
		vxlanName         string
		resolvedNeighbors <-chan watcher.Neighbor
	}
}

func (fake *ARPInserter) HandleResolvedNeighbors(ready chan error, ns namespace.Executor, vxlanName string, resolvedNeighbors <-chan watcher.Neighbor) {
	fake.handleResolvedNeighborsMutex.Lock()
	fake.handleResolvedNeighborsArgsForCall = append(fake.handleResolvedNeighborsArgsForCall, struct {
		ready             chan error
		ns                namespace.Executor
		vxlanName         string
		resolvedNeighbors <-chan watcher.Neighbor
	}{ready, ns, vxlanName, resolvedNeighbors})
	fake.handleResolvedNeighborsMutex.Unlock()
	if fake.HandleResolvedNeighborsStub != nil {
		fake.HandleResolvedNeighborsStub(ready, ns, vxlanName, resolvedNeighbors)
	}
}

func (fake *ARPInserter) HandleResolvedNeighborsCallCount() int {
	fake.handleResolvedNeighborsMutex.RLock()
	defer fake.handleResolvedNeighborsMutex.RUnlock()
	return len(fake.handleResolvedNeighborsArgsForCall)
}

func (fake *ARPInserter) HandleResolvedNeighborsArgsForCall(i int) (chan error, namespace.Executor, string, <-chan watcher.Neighbor) {
	fake.handleResolvedNeighborsMutex.RLock()
	defer fake.handleResolvedNeighborsMutex.RUnlock()
	return fake.handleResolvedNeighborsArgsForCall[i].ready, fake.handleResolvedNeighborsArgsForCall[i].ns, fake.handleResolvedNeighborsArgsForCall[i].vxlanName, fake.handleResolvedNeighborsArgsForCall[i].resolvedNeighbors
}
