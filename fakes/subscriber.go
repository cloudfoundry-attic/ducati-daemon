// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
	"github.com/cloudfoundry-incubator/ducati-daemon/watcher"
)

type Subscriber struct {
	SubscribeStub        func(ns namespace.Namespace, ch chan<- *watcher.Neigh, done <-chan struct{}) error
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		ns   namespace.Namespace
		ch   chan<- *watcher.Neigh
		done <-chan struct{}
	}
	subscribeReturns struct {
		result1 error
	}
}

func (fake *Subscriber) Subscribe(ns namespace.Namespace, ch chan<- *watcher.Neigh, done <-chan struct{}) error {
	fake.subscribeMutex.Lock()
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		ns   namespace.Namespace
		ch   chan<- *watcher.Neigh
		done <-chan struct{}
	}{ns, ch, done})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub(ns, ch, done)
	} else {
		return fake.subscribeReturns.result1
	}
}

func (fake *Subscriber) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *Subscriber) SubscribeArgsForCall(i int) (namespace.Namespace, chan<- *watcher.Neigh, <-chan struct{}) {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return fake.subscribeArgsForCall[i].ns, fake.subscribeArgsForCall[i].ch, fake.subscribeArgsForCall[i].done
}

func (fake *Subscriber) SubscribeReturns(result1 error) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 error
	}{result1}
}
