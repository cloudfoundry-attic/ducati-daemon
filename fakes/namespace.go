// This file was generated by counterfeiter
package fakes

import (
	"os"
	"sync"
)

type Namespace struct {
	ExecuteStub        func(func(*os.File) error) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 func(*os.File) error
	}
	executeReturns struct {
		result1 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	FdStub        func() uintptr
	fdMutex       sync.RWMutex
	fdArgsForCall []struct{}
	fdReturns     struct {
		result1 uintptr
	}
	MarshalJSONStub        func() ([]byte, error)
	marshalJSONMutex       sync.RWMutex
	marshalJSONArgsForCall []struct{}
	marshalJSONReturns     struct {
		result1 []byte
		result2 error
	}
}

func (fake *Namespace) Execute(arg1 func(*os.File) error) error {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 func(*os.File) error
	}{arg1})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1)
	} else {
		return fake.executeReturns.result1
	}
}

func (fake *Namespace) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *Namespace) ExecuteArgsForCall(i int) func(*os.File) error {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].arg1
}

func (fake *Namespace) ExecuteReturns(result1 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Namespace) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *Namespace) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *Namespace) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *Namespace) Fd() uintptr {
	fake.fdMutex.Lock()
	fake.fdArgsForCall = append(fake.fdArgsForCall, struct{}{})
	fake.fdMutex.Unlock()
	if fake.FdStub != nil {
		return fake.FdStub()
	} else {
		return fake.fdReturns.result1
	}
}

func (fake *Namespace) FdCallCount() int {
	fake.fdMutex.RLock()
	defer fake.fdMutex.RUnlock()
	return len(fake.fdArgsForCall)
}

func (fake *Namespace) FdReturns(result1 uintptr) {
	fake.FdStub = nil
	fake.fdReturns = struct {
		result1 uintptr
	}{result1}
}

func (fake *Namespace) MarshalJSON() ([]byte, error) {
	fake.marshalJSONMutex.Lock()
	fake.marshalJSONArgsForCall = append(fake.marshalJSONArgsForCall, struct{}{})
	fake.marshalJSONMutex.Unlock()
	if fake.MarshalJSONStub != nil {
		return fake.MarshalJSONStub()
	} else {
		return fake.marshalJSONReturns.result1, fake.marshalJSONReturns.result2
	}
}

func (fake *Namespace) MarshalJSONCallCount() int {
	fake.marshalJSONMutex.RLock()
	defer fake.marshalJSONMutex.RUnlock()
	return len(fake.marshalJSONArgsForCall)
}

func (fake *Namespace) MarshalJSONReturns(result1 []byte, result2 error) {
	fake.MarshalJSONStub = nil
	fake.marshalJSONReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}
