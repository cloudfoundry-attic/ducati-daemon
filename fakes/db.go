// This file was generated by counterfeiter
package fakes

import (
	"database/sql"
	"sync"
)

type Db struct {
	ExecStub        func(query string, args ...interface{}) (sql.Result, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		query string
		args  []interface{}
	}
	execReturns struct {
		result1 sql.Result
		result2 error
	}
	NamedExecStub        func(query string, arg interface{}) (sql.Result, error)
	namedExecMutex       sync.RWMutex
	namedExecArgsForCall []struct {
		query string
		arg   interface{}
	}
	namedExecReturns struct {
		result1 sql.Result
		result2 error
	}
	GetStub        func(dest interface{}, query string, args ...interface{}) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		dest  interface{}
		query string
		args  []interface{}
	}
	getReturns struct {
		result1 error
	}
	SelectStub        func(dest interface{}, query string, args ...interface{}) error
	selectMutex       sync.RWMutex
	selectArgsForCall []struct {
		dest  interface{}
		query string
		args  []interface{}
	}
	selectReturns struct {
		result1 error
	}
}

func (fake *Db) Exec(query string, args ...interface{}) (sql.Result, error) {
	fake.execMutex.Lock()
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		query string
		args  []interface{}
	}{query, args})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(query, args...)
	} else {
		return fake.execReturns.result1, fake.execReturns.result2
	}
}

func (fake *Db) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *Db) ExecArgsForCall(i int) (string, []interface{}) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].query, fake.execArgsForCall[i].args
}

func (fake *Db) ExecReturns(result1 sql.Result, result2 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 sql.Result
		result2 error
	}{result1, result2}
}

func (fake *Db) NamedExec(query string, arg interface{}) (sql.Result, error) {
	fake.namedExecMutex.Lock()
	fake.namedExecArgsForCall = append(fake.namedExecArgsForCall, struct {
		query string
		arg   interface{}
	}{query, arg})
	fake.namedExecMutex.Unlock()
	if fake.NamedExecStub != nil {
		return fake.NamedExecStub(query, arg)
	} else {
		return fake.namedExecReturns.result1, fake.namedExecReturns.result2
	}
}

func (fake *Db) NamedExecCallCount() int {
	fake.namedExecMutex.RLock()
	defer fake.namedExecMutex.RUnlock()
	return len(fake.namedExecArgsForCall)
}

func (fake *Db) NamedExecArgsForCall(i int) (string, interface{}) {
	fake.namedExecMutex.RLock()
	defer fake.namedExecMutex.RUnlock()
	return fake.namedExecArgsForCall[i].query, fake.namedExecArgsForCall[i].arg
}

func (fake *Db) NamedExecReturns(result1 sql.Result, result2 error) {
	fake.NamedExecStub = nil
	fake.namedExecReturns = struct {
		result1 sql.Result
		result2 error
	}{result1, result2}
}

func (fake *Db) Get(dest interface{}, query string, args ...interface{}) error {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		dest  interface{}
		query string
		args  []interface{}
	}{dest, query, args})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(dest, query, args...)
	} else {
		return fake.getReturns.result1
	}
}

func (fake *Db) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *Db) GetArgsForCall(i int) (interface{}, string, []interface{}) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].dest, fake.getArgsForCall[i].query, fake.getArgsForCall[i].args
}

func (fake *Db) GetReturns(result1 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *Db) Select(dest interface{}, query string, args ...interface{}) error {
	fake.selectMutex.Lock()
	fake.selectArgsForCall = append(fake.selectArgsForCall, struct {
		dest  interface{}
		query string
		args  []interface{}
	}{dest, query, args})
	fake.selectMutex.Unlock()
	if fake.SelectStub != nil {
		return fake.SelectStub(dest, query, args...)
	} else {
		return fake.selectReturns.result1
	}
}

func (fake *Db) SelectCallCount() int {
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	return len(fake.selectArgsForCall)
}

func (fake *Db) SelectArgsForCall(i int) (interface{}, string, []interface{}) {
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	return fake.selectArgsForCall[i].dest, fake.selectArgsForCall[i].query, fake.selectArgsForCall[i].args
}

func (fake *Db) SelectReturns(result1 error) {
	fake.SelectStub = nil
	fake.selectReturns = struct {
		result1 error
	}{result1}
}
