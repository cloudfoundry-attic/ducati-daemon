// This file was generated by counterfeiter
package fakes

import "sync"

type Deletor struct {
	DeleteStub        func(interfaceName string, containerNSPath string, sandboxName string, vxlanDeviceName string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		interfaceName   string
		containerNSPath string
		sandboxName     string
		vxlanDeviceName string
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *Deletor) Delete(interfaceName string, containerNSPath string, sandboxName string, vxlanDeviceName string) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		interfaceName   string
		containerNSPath string
		sandboxName     string
		vxlanDeviceName string
	}{interfaceName, containerNSPath, sandboxName, vxlanDeviceName})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(interfaceName, containerNSPath, sandboxName, vxlanDeviceName)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *Deletor) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *Deletor) DeleteArgsForCall(i int) (string, string, string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].interfaceName, fake.deleteArgsForCall[i].containerNSPath, fake.deleteArgsForCall[i].sandboxName, fake.deleteArgsForCall[i].vxlanDeviceName
}

func (fake *Deletor) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}
