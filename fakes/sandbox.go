// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
	"github.com/cloudfoundry-incubator/ducati-daemon/sandbox"
	"github.com/tedsuo/ifrit"
)

type Sandbox struct {
	LockStub          func()
	lockMutex         sync.RWMutex
	lockArgsForCall   []struct{}
	UnlockStub        func()
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct{}
	SetupStub         func() error
	setupMutex        sync.RWMutex
	setupArgsForCall  []struct{}
	setupReturns      struct {
		result1 error
	}
	NamespaceStub        func() namespace.Namespace
	namespaceMutex       sync.RWMutex
	namespaceArgsForCall []struct{}
	namespaceReturns     struct {
		result1 namespace.Namespace
	}
	LaunchDNSStub        func(ifrit.Runner) error
	launchDNSMutex       sync.RWMutex
	launchDNSArgsForCall []struct {
		arg1 ifrit.Runner
	}
	launchDNSReturns struct {
		result1 error
	}
	VethDeviceCountStub        func() (int, error)
	vethDeviceCountMutex       sync.RWMutex
	vethDeviceCountArgsForCall []struct{}
	vethDeviceCountReturns     struct {
		result1 int
		result2 error
	}
	TeardownStub        func() error
	teardownMutex       sync.RWMutex
	teardownArgsForCall []struct{}
	teardownReturns     struct {
		result1 error
	}
}

func (fake *Sandbox) Lock() {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct{}{})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		fake.LockStub()
	}
}

func (fake *Sandbox) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *Sandbox) Unlock() {
	fake.unlockMutex.Lock()
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct{}{})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		fake.UnlockStub()
	}
}

func (fake *Sandbox) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *Sandbox) Setup() error {
	fake.setupMutex.Lock()
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct{}{})
	fake.setupMutex.Unlock()
	if fake.SetupStub != nil {
		return fake.SetupStub()
	} else {
		return fake.setupReturns.result1
	}
}

func (fake *Sandbox) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *Sandbox) SetupReturns(result1 error) {
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 error
	}{result1}
}

func (fake *Sandbox) Namespace() namespace.Namespace {
	fake.namespaceMutex.Lock()
	fake.namespaceArgsForCall = append(fake.namespaceArgsForCall, struct{}{})
	fake.namespaceMutex.Unlock()
	if fake.NamespaceStub != nil {
		return fake.NamespaceStub()
	} else {
		return fake.namespaceReturns.result1
	}
}

func (fake *Sandbox) NamespaceCallCount() int {
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return len(fake.namespaceArgsForCall)
}

func (fake *Sandbox) NamespaceReturns(result1 namespace.Namespace) {
	fake.NamespaceStub = nil
	fake.namespaceReturns = struct {
		result1 namespace.Namespace
	}{result1}
}

func (fake *Sandbox) LaunchDNS(arg1 ifrit.Runner) error {
	fake.launchDNSMutex.Lock()
	fake.launchDNSArgsForCall = append(fake.launchDNSArgsForCall, struct {
		arg1 ifrit.Runner
	}{arg1})
	fake.launchDNSMutex.Unlock()
	if fake.LaunchDNSStub != nil {
		return fake.LaunchDNSStub(arg1)
	} else {
		return fake.launchDNSReturns.result1
	}
}

func (fake *Sandbox) LaunchDNSCallCount() int {
	fake.launchDNSMutex.RLock()
	defer fake.launchDNSMutex.RUnlock()
	return len(fake.launchDNSArgsForCall)
}

func (fake *Sandbox) LaunchDNSArgsForCall(i int) ifrit.Runner {
	fake.launchDNSMutex.RLock()
	defer fake.launchDNSMutex.RUnlock()
	return fake.launchDNSArgsForCall[i].arg1
}

func (fake *Sandbox) LaunchDNSReturns(result1 error) {
	fake.LaunchDNSStub = nil
	fake.launchDNSReturns = struct {
		result1 error
	}{result1}
}

func (fake *Sandbox) VethDeviceCount() (int, error) {
	fake.vethDeviceCountMutex.Lock()
	fake.vethDeviceCountArgsForCall = append(fake.vethDeviceCountArgsForCall, struct{}{})
	fake.vethDeviceCountMutex.Unlock()
	if fake.VethDeviceCountStub != nil {
		return fake.VethDeviceCountStub()
	} else {
		return fake.vethDeviceCountReturns.result1, fake.vethDeviceCountReturns.result2
	}
}

func (fake *Sandbox) VethDeviceCountCallCount() int {
	fake.vethDeviceCountMutex.RLock()
	defer fake.vethDeviceCountMutex.RUnlock()
	return len(fake.vethDeviceCountArgsForCall)
}

func (fake *Sandbox) VethDeviceCountReturns(result1 int, result2 error) {
	fake.VethDeviceCountStub = nil
	fake.vethDeviceCountReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *Sandbox) Teardown() error {
	fake.teardownMutex.Lock()
	fake.teardownArgsForCall = append(fake.teardownArgsForCall, struct{}{})
	fake.teardownMutex.Unlock()
	if fake.TeardownStub != nil {
		return fake.TeardownStub()
	} else {
		return fake.teardownReturns.result1
	}
}

func (fake *Sandbox) TeardownCallCount() int {
	fake.teardownMutex.RLock()
	defer fake.teardownMutex.RUnlock()
	return len(fake.teardownArgsForCall)
}

func (fake *Sandbox) TeardownReturns(result1 error) {
	fake.TeardownStub = nil
	fake.teardownReturns = struct {
		result1 error
	}{result1}
}

var _ sandbox.Sandbox = new(Sandbox)
