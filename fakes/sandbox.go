// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
	"github.com/cloudfoundry-incubator/ducati-daemon/sandbox"
	"github.com/tedsuo/ifrit"
)

type Sandbox struct {
	LockStub             func()
	lockMutex            sync.RWMutex
	lockArgsForCall      []struct{}
	UnlockStub           func()
	unlockMutex          sync.RWMutex
	unlockArgsForCall    []struct{}
	NamespaceStub        func() namespace.Namespace
	namespaceMutex       sync.RWMutex
	namespaceArgsForCall []struct{}
	namespaceReturns     struct {
		result1 namespace.Namespace
	}
	LaunchDNSStub        func(ifrit.Runner) error
	launchDNSMutex       sync.RWMutex
	launchDNSArgsForCall []struct {
		arg1 ifrit.Runner
	}
	launchDNSReturns struct {
		result1 error
	}
}

func (fake *Sandbox) Lock() {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct{}{})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		fake.LockStub()
	}
}

func (fake *Sandbox) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *Sandbox) Unlock() {
	fake.unlockMutex.Lock()
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct{}{})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		fake.UnlockStub()
	}
}

func (fake *Sandbox) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *Sandbox) Namespace() namespace.Namespace {
	fake.namespaceMutex.Lock()
	fake.namespaceArgsForCall = append(fake.namespaceArgsForCall, struct{}{})
	fake.namespaceMutex.Unlock()
	if fake.NamespaceStub != nil {
		return fake.NamespaceStub()
	} else {
		return fake.namespaceReturns.result1
	}
}

func (fake *Sandbox) NamespaceCallCount() int {
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return len(fake.namespaceArgsForCall)
}

func (fake *Sandbox) NamespaceReturns(result1 namespace.Namespace) {
	fake.NamespaceStub = nil
	fake.namespaceReturns = struct {
		result1 namespace.Namespace
	}{result1}
}

func (fake *Sandbox) LaunchDNS(arg1 ifrit.Runner) error {
	fake.launchDNSMutex.Lock()
	fake.launchDNSArgsForCall = append(fake.launchDNSArgsForCall, struct {
		arg1 ifrit.Runner
	}{arg1})
	fake.launchDNSMutex.Unlock()
	if fake.LaunchDNSStub != nil {
		return fake.LaunchDNSStub(arg1)
	} else {
		return fake.launchDNSReturns.result1
	}
}

func (fake *Sandbox) LaunchDNSCallCount() int {
	fake.launchDNSMutex.RLock()
	defer fake.launchDNSMutex.RUnlock()
	return len(fake.launchDNSArgsForCall)
}

func (fake *Sandbox) LaunchDNSArgsForCall(i int) ifrit.Runner {
	fake.launchDNSMutex.RLock()
	defer fake.launchDNSMutex.RUnlock()
	return fake.launchDNSArgsForCall[i].arg1
}

func (fake *Sandbox) LaunchDNSReturns(result1 error) {
	fake.LaunchDNSStub = nil
	fake.launchDNSReturns = struct {
		result1 error
	}{result1}
}

var _ sandbox.Sandbox = new(Sandbox)
