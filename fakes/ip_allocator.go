// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/appc/cni/pkg/types"
)

type IPAllocator struct {
	AllocateIPStub        func(networkID, containerID string) (*types.Result, error)
	allocateIPMutex       sync.RWMutex
	allocateIPArgsForCall []struct {
		networkID   string
		containerID string
	}
	allocateIPReturns struct {
		result1 *types.Result
		result2 error
	}
	ReleaseIPStub        func(networkID, containerID string) error
	releaseIPMutex       sync.RWMutex
	releaseIPArgsForCall []struct {
		networkID   string
		containerID string
	}
	releaseIPReturns struct {
		result1 error
	}
}

func (fake *IPAllocator) AllocateIP(networkID string, containerID string) (*types.Result, error) {
	fake.allocateIPMutex.Lock()
	fake.allocateIPArgsForCall = append(fake.allocateIPArgsForCall, struct {
		networkID   string
		containerID string
	}{networkID, containerID})
	fake.allocateIPMutex.Unlock()
	if fake.AllocateIPStub != nil {
		return fake.AllocateIPStub(networkID, containerID)
	} else {
		return fake.allocateIPReturns.result1, fake.allocateIPReturns.result2
	}
}

func (fake *IPAllocator) AllocateIPCallCount() int {
	fake.allocateIPMutex.RLock()
	defer fake.allocateIPMutex.RUnlock()
	return len(fake.allocateIPArgsForCall)
}

func (fake *IPAllocator) AllocateIPArgsForCall(i int) (string, string) {
	fake.allocateIPMutex.RLock()
	defer fake.allocateIPMutex.RUnlock()
	return fake.allocateIPArgsForCall[i].networkID, fake.allocateIPArgsForCall[i].containerID
}

func (fake *IPAllocator) AllocateIPReturns(result1 *types.Result, result2 error) {
	fake.AllocateIPStub = nil
	fake.allocateIPReturns = struct {
		result1 *types.Result
		result2 error
	}{result1, result2}
}

func (fake *IPAllocator) ReleaseIP(networkID string, containerID string) error {
	fake.releaseIPMutex.Lock()
	fake.releaseIPArgsForCall = append(fake.releaseIPArgsForCall, struct {
		networkID   string
		containerID string
	}{networkID, containerID})
	fake.releaseIPMutex.Unlock()
	if fake.ReleaseIPStub != nil {
		return fake.ReleaseIPStub(networkID, containerID)
	} else {
		return fake.releaseIPReturns.result1
	}
}

func (fake *IPAllocator) ReleaseIPCallCount() int {
	fake.releaseIPMutex.RLock()
	defer fake.releaseIPMutex.RUnlock()
	return len(fake.releaseIPArgsForCall)
}

func (fake *IPAllocator) ReleaseIPArgsForCall(i int) (string, string) {
	fake.releaseIPMutex.RLock()
	defer fake.releaseIPMutex.RUnlock()
	return fake.releaseIPArgsForCall[i].networkID, fake.releaseIPArgsForCall[i].containerID
}

func (fake *IPAllocator) ReleaseIPReturns(result1 error) {
	fake.ReleaseIPStub = nil
	fake.releaseIPReturns = struct {
		result1 error
	}{result1}
}
