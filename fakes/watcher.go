// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-daemon/lib/namespace"
	"github.com/cloudfoundry-incubator/ducati-daemon/watcher"
)

type MissWatcher struct {
	StartMonitorStub        func(namespace.Executor) error
	startMonitorMutex       sync.RWMutex
	startMonitorArgsForCall []struct {
		arg1 namespace.Executor
	}
	startMonitorReturns struct {
		result1 error
	}
	StopMonitorStub        func(namespace.Executor) error
	stopMonitorMutex       sync.RWMutex
	stopMonitorArgsForCall []struct {
		arg1 namespace.Executor
	}
	stopMonitorReturns struct {
		result1 error
	}
}

func (fake *MissWatcher) StartMonitor(arg1 namespace.Executor) error {
	fake.startMonitorMutex.Lock()
	fake.startMonitorArgsForCall = append(fake.startMonitorArgsForCall, struct {
		arg1 namespace.Executor
	}{arg1})
	fake.startMonitorMutex.Unlock()
	if fake.StartMonitorStub != nil {
		return fake.StartMonitorStub(arg1)
	} else {
		return fake.startMonitorReturns.result1
	}
}

func (fake *MissWatcher) StartMonitorCallCount() int {
	fake.startMonitorMutex.RLock()
	defer fake.startMonitorMutex.RUnlock()
	return len(fake.startMonitorArgsForCall)
}

func (fake *MissWatcher) StartMonitorArgsForCall(i int) namespace.Executor {
	fake.startMonitorMutex.RLock()
	defer fake.startMonitorMutex.RUnlock()
	return fake.startMonitorArgsForCall[i].arg1
}

func (fake *MissWatcher) StartMonitorReturns(result1 error) {
	fake.StartMonitorStub = nil
	fake.startMonitorReturns = struct {
		result1 error
	}{result1}
}

func (fake *MissWatcher) StopMonitor(arg1 namespace.Executor) error {
	fake.stopMonitorMutex.Lock()
	fake.stopMonitorArgsForCall = append(fake.stopMonitorArgsForCall, struct {
		arg1 namespace.Executor
	}{arg1})
	fake.stopMonitorMutex.Unlock()
	if fake.StopMonitorStub != nil {
		return fake.StopMonitorStub(arg1)
	} else {
		return fake.stopMonitorReturns.result1
	}
}

func (fake *MissWatcher) StopMonitorCallCount() int {
	fake.stopMonitorMutex.RLock()
	defer fake.stopMonitorMutex.RUnlock()
	return len(fake.stopMonitorArgsForCall)
}

func (fake *MissWatcher) StopMonitorArgsForCall(i int) namespace.Executor {
	fake.stopMonitorMutex.RLock()
	defer fake.stopMonitorMutex.RUnlock()
	return fake.stopMonitorArgsForCall[i].arg1
}

func (fake *MissWatcher) StopMonitorReturns(result1 error) {
	fake.StopMonitorStub = nil
	fake.stopMonitorReturns = struct {
		result1 error
	}{result1}
}

var _ watcher.MissWatcher = new(MissWatcher)
